#!/usr/bin/perl
use strict;
use warnings;
use File::Basename;
use JSON;
use Data::Dumper;
use Try::Tiny;
use Switch;

my $datadir = "/root/domotique/sense/last";

my %map = qw(
8WXHPcW4BnTgECtTwggERUaySW3lYDWg	bleu
b9x4PQwoiBxbILzP6BOyDa2B9mLjCkuf	mother2
cFMQXyMgTq2NSo7xzoA6FdshEuy89rso	mother
EwTTqeSps3OEjLiuPCzJBjDyNzsalbYL	jaune2
GabevLs6UDLEw088zE9VNGQU4VBbIvoW	jaune
gkc4xDo71NRRJx3Ii1LiGc8sylOjiijr	vert
n36Agrvtag9dvIJtsfpCfQ47TzbU5Q74	orange2
pyMNpv2HesFpKQZdFFMhIH5XbAg82Tyq	vert2
RBeSi0P7HqoKgizZkRKWrd1msYJ9WgwZ	bleu2
Tkwj77D08YWHYr8HqTRr8uTIbvjpvdrT	orange
z7zeNSFKd03J6rUGXlzMvno1MglH3bRa	jesaipa
);

if ( basename($0) !~ /^sensemother_/ ) {
	die qq(Please ensure that the name of the script and it's symlinks starts with "sensemother_"\n);
}
my $basename = basename($0);
my ($type) = $basename =~ m/^sensemother_(\w+)$/;
#print "type: ".$type."\n";
die "type not defined" if !defined($type);
opendir(DIR, $datadir) or die "Unable to open $datadir:$!\n";
my @files = readdir(DIR) or die "Unable to read $datadir:$!\n";
closedir(DIR);
my %sig;

foreach my $file (grep {-f "$datadir/$_" } @files) {
#foreach my $file (grep {-f "$datadir/$_" && -M "$datadir/$_"< 1 } @files) {
	#print($file." $datadir/$file\n");
	next if ((time()-((stat("$datadir/$file"))[9]))>(5400) and !defined($ARGV[0]));

	my $d;
	try{
		$d = decode_json slurp("$datadir/$file");
	} catch {
		die "$!$@";
	};
	#print(Dumper(\$d)."\n\n");
	next unless (defined($d->{nodeUid}));
	switch($type) {
		case "battery" {
			next if (!exists($d->{type}) or $d->{type} ne $type);
			#print Dumper(\$d);
			if ( defined($ARGV[0]) and $ARGV[0] eq "config" ) {
				my $label = $d->{nodeUid};
				$label = $map{$d->{nodeUid}} if (exists($map{$d->{nodeUid}}));
				
				print "graph_title sense mother $type\n";
				print "graph_vlabel $type\n";
				print "graph_category Sensors\n";
				print "$d->{nodeUid}.label $label\n";
			} else {
				print "$d->{nodeUid}.value ".($d->{payload})."\n";
			}
		}  
		case "signal" {
			next if (!exists($d->{type}) or $d->{type} ne "presence");
			next if ((time()-((stat("$datadir/$file"))[9]))>(3600/4+1) and !defined($ARGV[0]));
			next if (!exists($d->{signal}));
			#print Dumper(\$d);
			if ( defined($ARGV[0]) and $ARGV[0] eq "config" ) {
				my $label = $d->{nodeUid};
				$label = $map{$d->{nodeUid}} if (exists($map{$d->{nodeUid}}));
				
				print "graph_title sense mother $type\n";
				print "graph_vlabel $type\n";
				print "graph_category Sensors\n";
				print "$d->{nodeUid}.label $label\n";
			} else {
				print "$d->{nodeUid}.value ".($d->{signal})."\n";
			}
		} 

		case "temperature" {
			next if ((time()-((stat("$datadir/$file"))[9]))>(3600/4+1) and !defined($ARGV[0]));
			next if (!exists($d->{type}) or $d->{type} ne $type);
			#print Dumper(\$d);
			if ( defined($ARGV[0]) and $ARGV[0] eq "config" ) {
				my $label = $d->{nodeUid};
				$label = $map{$d->{nodeUid}} if (exists($map{$d->{nodeUid}}));
				
				print "graph_title sense mother $type\n";
				print "graph_vlabel $type\n";
				print "graph_category Sensors\n";
				print "$d->{nodeUid}.label $label\n";
			} else {
				print "$d->{nodeUid}.value ".($d->{payload}/100)."\n";
			}
		} 
		else {
			#print STDERR "unknown type ".$d->{type}."\n";
			next;
		}
	}
}

#print Dumper($gps);

sub slurp {
	my $file = shift;
	open my $fh, '<', $file or die $!;
	local $/ = undef;
	my $cont = <$fh>;
	close $fh;
	return $cont;
}
